data.T3 <- data.T3 %>% na.omit()
# The Choice screen records all trial related information, so we only need to keep those observations.
display.name <- "T3Trial"
screen.name <- "Rating Screen"
data.T3 <- data.T3[ data.T3$display == display.name & data.T3$screen == screen.name , ]
# Make response a numerical variable.
data.T3[data.T3$response=="3 (a lot)", "response"] <- toString(3)
data.T3[data.T3$response=="2 (ok)", "response"] <- toString(2)
data.T3[data.T3$response=="1 (little)", "response"] <- toString(1)
data.T3[data.T3$response=="0 (neutral)", "response"] <- toString(0)
data.T3[data.T3$response=="-1 (dislike)", "response"] <- toString(-1)
data.T3$response <- data.T3$response %>% as.integer()
# Add a trial number.
data.T3 <- data.T3 %>%
group_by(subject) %>%
mutate(
trial = row_number()
)
# Write to csv.
write.csv(
data.T3,
file.path(datadir, "data.T3.csv")
)
rm(list = ls())
seed = 1337
library(dplyr) #pipeline %>%
library(plotrix) #std.error
library(ggplot2) #plots... duh
library(grid) #combine plots
library(gridExtra) #more combining plots
library(ggsci) #I like the Futurama color palette <3
library(latex2exp) #for fancy math stuffs in the plots
rawdatadir <- '../data' # raw data
datadir <- '../00 pilot/clean_data' # clean data
figdir <- '../00 pilot/figures' # figure folder
tbldir <- '../00 pilot/tables' # figure folder
tempdir <- '../00 pilot/temp' # temp folder
textdir <- "../00 pilot/text" # text folder
final.figdir <- "../biased-priors-manuscript/figures"
final.txtdir <- "../biased-priors-manuscript/text-files"
final.tbldir <- "../biased-priors-manuscript/tables"
line_width = 1.5
dotsize = .5
jitter_amt = 0.075
textsize <- 18
legtxtsize <- 18
plot_margins <- 1
legend_location <- "none"
col_title_size = 22
col_title_face = 'bold'
back_fill_e = 'lightcyan1'
back_fill_c = 'mistyrose1'
back_fill_j = 'lightcyan2'
plot_width = 8
plot_height = 8
final_plot_units = c('in')
ggplot <- function(...) ggplot2::ggplot(...) +
coord_cartesian(expand=F) +
theme_bw() +
#plot options
theme(
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
text=element_text(size=textsize),
plot.margin=unit(c(plot_margins*.5,plot_margins,plot_margins*.5,plot_margins),"cm")
) +
#legend options
theme(
legend.title = element_blank(),
legend.position = legend_location,
legend.justification = c(0, 1),
legend.text = element_text(size = legtxtsize),
legend.background = element_rect(fill = "transparent")
) +
#color palette
scale_color_npg() +
scale_fill_npg()
data.T1 <- read.csv(file.path(datadir, "data.T1.csv"))
data.T2 <- read.csv(file.path(datadir, "data.T2.csv"))
data.T3 <- read.csv(file.path(datadir, "data.T3.csv"))
#--------------------------------------------------------------------------------
# Response accuracy.
#--------------------------------------------------------------------------------
pdata.T1.responseAccuracy <- data.T1 %>%
group_by(subject) %>%
summarize(
accuracy = sum(correct)/max(trial)
)
p.T1.responseAccuracy <- ggplot(pdata.T1.responseAccuracy, aes(accuracy)) +
# plot data
annotate(
"rect",
xmin = .86, xmax = .9,
ymin = 0, ymax = 50,
alpha = .1, fill = "darkred") +
geom_vline(
xintercept = 0.90,
linetype = "dashed",
color = "darkred",
alpha = .7,
size = line_width
) +
geom_density(
color = "grey30",
fill = "grey50",
size = line_width
) +
# options
xlim(c(.86,1)) +
ylim(c(0,50)) +
labs(
x = "Accuracy",
y = "Density"
)
plot(p.T1.responseAccuracy)
ggsave(
file.path(figdir, "p.T1.responseAccuracy.pdf"),
plot = p.T1.responseAccuracy
)
ggsave(
file.path(final.figdir, "p.T1.responseAccuracy.pdf"),
plot = p.T1.responseAccuracy
)
rm(list = ls())
seed = 1337
library(dplyr) #pipeline %>%
library(plotrix) #std.error
library(ggplot2) #plots... duh
library(grid) #combine plots
library(gridExtra) #more combining plots
library(ggsci) #I like the Futurama color palette <3
library(latex2exp) #for fancy math stuffs in the plots
rawdatadir <- '../data' # raw data
datadir <- '../00 pilot/clean_data' # clean data
figdir <- '../00 pilot/figures' # figure folder
tbldir <- '../00 pilot/tables' # figure folder
tempdir <- '../00 pilot/temp' # temp folder
textdir <- "../00 pilot/text" # text folder
final.figdir <- "../surprise-utility-manuscript/figures"
final.txtdir <- "../surprise-utility-manuscript/text-files"
final.tbldir <- "../surprise-utility-manuscript/tables"
line_width = 1.5
dotsize = .5
jitter_amt = 0.075
textsize <- 18
legtxtsize <- 18
plot_margins <- 1
legend_location <- "none"
col_title_size = 22
col_title_face = 'bold'
back_fill_e = 'lightcyan1'
back_fill_c = 'mistyrose1'
back_fill_j = 'lightcyan2'
plot_width = 8
plot_height = 8
final_plot_units = c('in')
ggplot <- function(...) ggplot2::ggplot(...) +
coord_cartesian(expand=F) +
theme_bw() +
#plot options
theme(
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
text=element_text(size=textsize),
plot.margin=unit(c(plot_margins*.5,plot_margins,plot_margins*.5,plot_margins),"cm")
) +
#legend options
theme(
legend.title = element_blank(),
legend.position = legend_location,
legend.justification = c(0, 1),
legend.text = element_text(size = legtxtsize),
legend.background = element_rect(fill = "transparent")
) +
#color palette
scale_color_npg() +
scale_fill_npg()
data.T1 <- read.csv(file.path(datadir, "data.T1.csv"))
data.T2 <- read.csv(file.path(datadir, "data.T2.csv"))
data.T3 <- read.csv(file.path(datadir, "data.T3.csv"))
#--------------------------------------------------------------------------------
# Response accuracy.
#--------------------------------------------------------------------------------
pdata.T1.responseAccuracy <- data.T1 %>%
group_by(subject) %>%
summarize(
accuracy = sum(correct)/max(trial)
)
p.T1.responseAccuracy <- ggplot(pdata.T1.responseAccuracy, aes(accuracy)) +
# plot data
annotate(
"rect",
xmin = .86, xmax = .9,
ymin = 0, ymax = 50,
alpha = .1, fill = "darkred") +
geom_vline(
xintercept = 0.90,
linetype = "dashed",
color = "darkred",
alpha = .7,
size = line_width
) +
geom_density(
color = "grey30",
fill = "grey50",
size = line_width
) +
# options
xlim(c(.86,1)) +
ylim(c(0,50)) +
labs(
x = "Accuracy",
y = "Density"
)
plot(p.T1.responseAccuracy)
ggsave(
file.path(figdir, "p.T1.responseAccuracy.pdf"),
plot = p.T1.responseAccuracy
)
ggsave(
file.path(final.figdir, "p.T1.responseAccuracy.pdf"),
plot = p.T1.responseAccuracy
)
#--------------------------------------------------------------------------------
# Response time.
#--------------------------------------------------------------------------------
pdata.T1.responseTime <- data.T1 %>%
group_by(subject) %>%
summarize(
rt.mean = mean(rt)
)
p.T1.responseTime <- ggplot(pdata.T1.responseTime, aes(y=rt.mean)) +
# plot data
geom_boxplot(
color = "grey30",
fill = "grey50",
size = line_width
) +
# options
xlim(c(-.9,.9)) +
ylim(c(0, 1000)) +
labs(
y = "Mean Response Time (ms)"
) +
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
) +
coord_cartesian(expand=T)
plot(p.T1.responseTime)
ggsave(
file.path(figdir, "p.T1.responseTime.pdf"),
plot = p.T1.responseTime
)
ggsave(
file.path(final.figdir, "p.T1.responseTime.pdf"),
plot = p.T1.responseTime
)
#--------------------------------------------------------------------------------
# Response time by correct.
#--------------------------------------------------------------------------------
pdata.T1.responseTimeByCorrect <- data.T1 %>%
group_by(subject, correct) %>%
summarize(
rt.mean = mean(rt)
)
pdata.T1.responseTimeByCorrect$correct <- pdata.T1.responseTimeByCorrect$correct %>%
factor(
levels = c(1,0),
labels = c("Correct", "Incorrect")
)
p.T1.responseTimeByCorrect <- ggplot(pdata.T1.responseTimeByCorrect, aes(x=correct, y=rt.mean, fill = correct)) +
# plot data
geom_boxplot(
color = "grey30",
size = line_width
) +
# options
ylim(c(0, 1000)) +
labs(
y = "Mean Response Time (ms)"
) +
theme(
axis.title.x=element_blank()
) +
coord_cartesian(expand=T)
plot(p.T1.responseTimeByCorrect)
ggsave(
file.path(figdir, "p.T1.responseTimeByCorrect.pdf"),
plot = p.T1.responseTimeByCorrect
)
ggsave(
file.path(final.figdir, "p.T1.responseTimeByCorrect.pdf"),
plot = p.T1.responseTimeByCorrect
)
pdata.T2.nonmissingData <- data.T2 %>%
mutate(
nonmissing = as.numeric(response != "")
) %>%
group_by(subject) %>%
summarize(
obsCount = sum(nonmissing)
)
p.T2.nonmissingData <- ggplot(pdata.T2.nonmissingData, aes(obsCount)) +
# plot data
geom_histogram(
color = "grey30",
fill = "grey50",
size = line_width,
breaks = c(1:24)
) +
# options
xlim(c(0,24)) +
ylim(c(0,8)) +
labs(
x = "Task 2 Observation Count (Max=24)",
y = "Number of Subjects"
)
plot(p.T2.nonmissingData)
ggsave(
file.path(figdir, "p.T2.nonmissingData.pdf"),
plot = p.T2.nonmissingData
)
ggsave(
file.path(final.figdir, "p.T2.nonmissingData.pdf"),
plot = p.T2.nonmissingData
)
# Ideally, we'd like to test F(R, P=1) > F(nR, P=0). I think this is a pretty clear test if people learned.
# Placeholders
data.T2$pred_index <- NA
data.T2$pred_outcome <- 0
# Test model predictions row-wise.
for (row in c(1:nrow(data.T2))) {
currentRow <- data.T2[row, ]
# 1: F(R, P=1/3) > F(R, P=1)
fset <- c("fr1p13", "fr1p1")
if (currentRow$T2.leftFractal %in% fset & currentRow$T2.rightFractal %in% fset) {
data.T2[row, "pred_index"] <- 1
if (currentRow$T2.chosenFractal == "fr1p13") {
data.T2[row, "pred_outcome"] <- 1
}
}
# 2: F(nR, P=0) > F(nR, P=1/3)
fset <- c("fr0p0", "fr0p13")
if (currentRow$T2.leftFractal %in% fset & currentRow$T2.rightFractal %in% fset) {
data.T2[row, "pred_index"] <- 2
if (currentRow$T2.chosenFractal == "fr0p0") {
data.T2[row, "pred_outcome"] <- 1
}
}
# 3: F(P=1, H) > F(P=1/3, H)
fset <- c("fp1H", "fp13H")
if (currentRow$T2.leftFractal %in% fset & currentRow$T2.rightFractal %in% fset) {
data.T2[row, "pred_index"] <- 3
if (currentRow$T2.chosenFractal == "fp1H") {
data.T2[row, "pred_outcome"] <- 1
}
}
# 4: F(P=1/3, L) > F(P=1/3, H)
fset <- c("fp13L", "fp13H")
if (currentRow$T2.leftFractal %in% fset & currentRow$T2.rightFractal %in% fset) {
data.T2[row, "pred_index"] <- 4
if (currentRow$T2.chosenFractal == "fp13L") {
data.T2[row, "pred_outcome"] <- 1
}
}
# 5: F(P=1/3, L) = F(nR, P=0)
fset <- c("fp13L", "fr0p0")
if (currentRow$T2.leftFractal %in% fset & currentRow$T2.rightFractal %in% fset) {
data.T2[row, "pred_index"] <- 5
if (currentRow$T2.chosenFractal == "fp13L") {
data.T2[row, "pred_outcome"] <- 1
}
}
# 6: F(P=1/3, H) = F(nR, P=1/3)
fset <- c("fp13H", "fr0p13")
if (currentRow$T2.leftFractal %in% fset & currentRow$T2.rightFractal %in% fset) {
data.T2[row, "pred_index"] <- 6
if (currentRow$T2.chosenFractal == "fp13H") {
data.T2[row, "pred_outcome"] <- 1
}
}
}
# 1: F(R, P=1/3) > F(R, P=1)
# 2: F(nR, P=0) > F(nR, P=1/3)
# 3: F(P=1, H) > F(P=1/3, H)
# 4: F(P=1/3, L) > F(P=1/3, H)
# 5: F(P=1/3, L) = F(nR, P=0)
# 6: F(P=1/3, H) = F(nR, P=1/3)
pdata.T2.modelPredictions <- data.T2 %>%
group_by(subject, pred_index) %>%
summarize(
proportion_consistent = sum(pred_outcome)/4
)
pdata.T2.modelPredictions$pred_index <- factor(pdata.T2.modelPredictions$pred_index)
p.T2.modelPredictions <- ggplot(pdata.T2.modelPredictions, aes(x=pred_index, y=proportion_consistent, fill = pred_index)) +
# plot data
geom_hline(
yintercept = 0.5,
size = line_width,
color = "darkred",
alpha = .2,
linetype = "dashed"
) +
geom_violin(
color = "grey30",
size = line_width
) +
stat_summary(
fun.data = "mean_se",
fun.args = list(mult=1),
geom = "pointrange",
color = "white"
) +
# options
labs(
x = "",
y = "Proportion of Responses"
) +
coord_cartesian(expand=T) +
scale_y_continuous(
breaks = c(0, .5, 1)
) +
scale_x_discrete(
breaks = c(1:6),
labels = c(
bquote(bold("F(R, P=1/3)")~"> F(R, P=1)"),
bquote(bold("F(nR, P=0)")~"> F(nR, P=1/3)"),
bquote(bold("F(P=1, H)")~"> F(P=1/3, H)"),
bquote(bold("F(P=1/3, L)")~"> F(P=1/3, H)"),
bquote(bold("F(P=1/3, L)")~"= F(nR, P=0)"),
bquote(bold("F(P=1/3, H)")~"= F(nR, P=1/3)")
)
) +
theme(
axis.text.x = element_text(
size = 10.5,
angle = 15,
vjust = 1,
hjust = 1
)
)
plot(p.T2.modelPredictions)
ggsave(
file.path(figdir, "p.T2.modelPredictions.pdf"),
plot = p.T2.modelPredictions
)
ggsave(
file.path(final.figdir, "p.T2.modelPredictions.pdf"),
plot = p.T2.modelPredictions
)
#--------------------------------------------------------------------------------
# Liking Ratings
#--------------------------------------------------------------------------------
pdata.T3.ratings <- data.T3
p.T3.ratings <- ggplot(pdata.T3.ratings, aes(response)) +
# plot data
geom_histogram(
color = "grey30",
fill = "grey50",
size = line_width,
binwidth = 1
) +
# options
ylim(c(0,220)) +
labs(
x = "Liking Ratings",
y = "Count"
) +
coord_flip(expand=T)
plot(p.T3.ratings)
ggsave(
file.path(figdir, "p.T3.ratings.pdf"),
plot = p.T3.ratings
)
ggsave(
file.path(final.figdir, "p.T3.ratings.pdf"),
plot = p.T3.ratings
)
#--------------------------------------------------------------------------------
# Liking Ratings By Subject
#--------------------------------------------------------------------------------
pdata.T3.ratingsBySubject <- data.T3
pdata.T3.ratingsBySubject$subject <- pdata.T3.ratingsBySubject$subject %>%
factor()
p.T3.ratingsBySubject <- ggplot(pdata.T3.ratingsBySubject, aes(x=subject, y=response, fill = subject)) +
# plot data
geom_violin(
color = "grey30",
size = line_width
) +
# options
labs(
x = "Subject",
y = "Liking Ratings"
) +
coord_cartesian(expand=T)
plot(p.T3.ratingsBySubject)
ggsave(
file.path(figdir, "p.T3.ratingsBySubject.pdf"),
plot = p.T3.ratingsBySubject,
width = plot_width,
height = plot_height *.33
)
ggsave(
file.path(final.figdir, "p.T3.ratingsBySubject.pdf"),
plot = p.T3.ratingsBySubject,
width = plot_width,
height = plot_height *.33
)
View(data.T1)
